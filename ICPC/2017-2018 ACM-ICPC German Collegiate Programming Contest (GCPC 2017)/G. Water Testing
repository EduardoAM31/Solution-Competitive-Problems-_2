#include <bits/stdc++.h>
using namespace std;
#define ll long long
struct pt{
    int x,y;
    pt(int x_ = 0, int y_ = 0) : x(x_), y(y_) {}
    bool operator < (const pt p) const {
        if(x != p.x)return x < p.x;
        return y < p.y;
    }
    bool operator == (const pt p) const {
        return x == p.x and y == p.y;
    }
    pt operator + (const pt p) const {return pt(x + p.x, y + p.y);}
    pt operator - (const pt p) const {return pt(x - p.x, y - p.y);}
    pt operator * (const int c) const {return pt(x * c, y * c);}
    ll operator * (const pt p) const {return x * (ll)p.x + y*(ll)p.y;}
    ll operator ^ (const pt p) const {return x * (ll)p.y - y*(ll)p.x;}

    friend istream& operator >> (istream& in, pt& p){
        return in >> p.x >> p.y;
    }
};
struct line{
    pt p, q;
    line() {}
    line(pt p_, pt q_) : p(p_), q(q_) {}
    friend istream& operator >> (istream& in, line& r){
        return in >> r.p >> r.q;
    }
};
ll sarea2(pt p,pt q,pt r){
    return (q - p)^(r - q);
}
ll polarea2(vector<pt> v){
    ll ret = 0;
    for(int i=0;i<v.size();i++)
        ret += sarea2(pt(0, 0), v[i], v[(i + 1) % v.size()]);
    return abs(ret);
}
int segpoints(line r){
    return 1 + __gcd(abs(r.p.x - r.q.x), abs(r.p.y - r.q.y));
}
ll ip(vector<pt> v){
    ll b=0;
    for(int i=0;i<v.size();i++)
        b += segpoints(line(v[i], v[(i+1)%v.size()])) -1;
    return (polarea2(v) - b) / 2 + 1;
}
signed main(){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    int n;
    cin>>n;
    vector<pt> v(n);
    for(auto& i : v)
        cin>>i.x>>i.y;
    cout<<ip(v)<<endl;
}
