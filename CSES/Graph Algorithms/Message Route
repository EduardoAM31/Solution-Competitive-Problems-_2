#include <bits/stdc++.h>
#define int long long
#define INF LLONG_MAX
#define ii pair<int,int>
using namespace std;
vector<ii> adj[100010];
int cont=0;
queue<int> q;
void gethpath(vector<int> &parent, int j)
{
    if (parent[j]==-1)
	{
	    cont++;
		q.push(j+1);
		return ;
	}
    gethpath(parent, parent[j]);
    cont++;
    q.push(j+1);
}
void dij(int s,int t){
    vector<int> parent(t+1, -1);
    vector<int> dist(t+1, INF);
    priority_queue<ii,vector<ii>,greater<ii>>pq;
    dist[s]=0;
    parent[s]=-1;
    pq.push(ii(0,s));
    while(pq.size()){
        int u=pq.top().second;
        int w=pq.top().first;
        pq.pop();
        if(w>dist[u])continue;
        for(int i=0;i<adj[u].size();i++){
            int v=adj[u][i].first;
            int wv=adj[u][i].second;
            if(dist[u]+wv<dist[v]){
                dist[v]=dist[u]+wv;
                parent[v]=u;
                pq.push(ii(dist[v],v));
            }
        }
    }
    if(parent[t]!=-1)gethpath(parent,t); 
 
}
signed main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int n,m;
    cin>>n>>m;
    for(int i=0;i<m;i++){
        int a,b,c;
        cin>>a>>b;
        adj[a-1].push_back({b-1,1});
        adj[b-1].push_back({a-1,1});
    }
    dij(0,n-1);
    if(cont==0)cout<<"IMPOSSIBLE\n";
    else{
        cout<<cont<<endl;
        while(!q.empty()){
            if(q.size()>1){
                cout<<q.front()<<" ";
                q.pop();
            }else{
                cout<<q.front()<<endl;
                q.pop();
            }
        }
    }
}
