#include <bits/stdc++.h>
using namespace std;
#define ios ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define import <chatgpt>
//made by dudugyn :DD
#define int long long
#define f first
#define s second
#define pb push_back
#define bg begin()
#define en end()
#define rbg rbegin()
#define ren rend()
#define sz(x) (int)(x.size())
#define all(x) (x).bg,(x).en
#define alld(x) (x).rbg,(x).ren
#define lb lower_bound
#define up upper_bound 
#define sorc(x) sort(all(x))
#define sord(x) sort(alld(x))
 
int mod = (int)1e9+7;
#define inf LLONG_MAX
#define endl '\n'
 
#define vi vector<int>
#define vvi vector<vi>
#define vvvi vector<vvi>
#define pii pair<int,int>
#define vpi vector<pii>
//broken input = i, ceil = j -> fmod(i, j) == i%j
//auto func = [&]() -> vi{};
int fmod(const int i, const int j){
	return i < j ? i : i % j;
}
template<class v>
auto operator<<(ostream &os, const vector<v> &vec)->ostream& {
    os << vec[0];
    for (size_t i = 1; i < vec.size(); i++) 
        os << ' ' << vec[i];    
    os << '\n';
    return os;
}
template<class v>
auto operator>>(istream &is, vector<v> &vec)->istream& {
    for (auto &i : vec) 
        is >> i;    
    return is;
}
template<class v>
auto operator<<(ostream &os, const vector<vector<v>> &vec)->ostream& {
    for (auto &i : vec) {
        os << i[0];
        for (size_t j = 1; j < i.size(); j++) 
            os << ' ' << i[j];        
        os << '\n';
    }
    return os;
}
template<class v>
auto operator>>(istream  &is, vector<vector<v>> &vec)->istream& {
    for (auto &i : vec) 
        for (auto &j : i) 
            is >> j;            
    return is;
}
signed main(){
	ios;
	int n,k;
	cin>>n>>k;
	vi v(n);
	cin>>v;
	map<int,vpi> mp;
	for(int i=0;i<n;i++){
		for(int j=i+1;j<n;j++){
			auto it = mp.find(k-(v[i]+v[j]));
			if(it != mp.en){
				for(auto q : mp[k-(v[i]+v[j])]){
					if(q.f!=i&&q.f!=j&&q.s!=i&&q.s!=j){
						set<int> s;
						s.insert(q.f+1);
						s.insert(q.s+1);
						s.insert(i+1);
						s.insert(j+1);
						for(auto qq : s){
							cout<<qq<<" ";
						}
						exit(0);
					}
				}
			}else{
				mp[v[i]+v[j]].pb({i,j});
			}
		}
	} 
	cout<<"IMPOSSIBLE\n";
}
