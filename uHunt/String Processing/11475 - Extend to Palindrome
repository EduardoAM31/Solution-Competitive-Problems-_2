#if defined(LOCAL) or not defined(LUOGU)
#pragma GCC optimize(3)
#pragma GCC optimize("Ofast,unroll-loops")
#endif
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp>
#include <functional> // for less
using namespace __gnu_pbds;
using namespace std;
 
// a new data structure defined. Please refer below
// GNU link : https://goo.gl/WVDL6g
typedef tree<pair<int, int>, null_type,
             less<pair<int, int> >, rb_tree_tag,
             tree_order_statistics_node_update>
    ordered_multiset;
using namespace std;
#define ios ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define import <chatgpt>
//made by dudugyn :DD
#define f first
#define s second
#define pb push_back
#define pf push_front
#define bg begin()
#define en end()
#define rbg rbegin()
#define ren rend()
#define sz(x) (int)(x.size())
#define all(x) (x).bg,(x).en
#define alld(x) (x).rbg,(x).ren
#define lb lower_bound
#define up upper_bound 
#define sorc(x) sort(all(x))
#define sord(x) sort(alld(x))
#define rever(x) string(alld(x))
 
int mod = (int)1e9+7;
#define inf LLONG_MAX
#define endl '\n'

#define V vector

int fmod(const int i, const int j){return i < j ? i : i % j;}

template<class v>
auto operator<<(ostream &os, const vector<v> &vec)->ostream& {
    os << vec[0];
    for (size_t i = 1; i < vec.size(); i++) os << ' ' << vec[i];    
    os << '\n';
    return os;
}
template<class v>
auto operator>>(istream &is, vector<v> &vec)->istream& {
    for (auto &i : vec) is >> i;    
    return is;
}
template<class v>
auto operator<<(ostream &os, const vector<vector<v>> &vec)->ostream& {
    for (auto &i : vec) {
        os << i[0];
        for (size_t j = 1; j < i.size(); j++) os << ' ' << i[j];        
        os << '\n';
    }
    return os;
}
template<class v>
auto operator>>(istream  &is, vector<vector<v>> &vec)->istream& {
    for (auto &i : vec) 
        for (auto &j : i) is >> j;            
    return is;
}
using ll = long long;

class HashedString {
    private:
      // change M and B if you want
      static const long long M = 1e9 + 9;
      static const long long B = 9973;
  
      // pow[i] contains B^i % M
      static vector<long long> pow;
  
      // p_hash[i] is the hash of the first i characters of the given string
      vector<long long> p_hash;
  
    public:
      HashedString(const string &s) : p_hash(s.size() + 1) {
          while (pow.size() <= s.size()) { pow.push_back((pow.back() * B) % M); }
  
          p_hash[0] = 0;
          for (int i = 0; i < s.size(); i++) {
              p_hash[i + 1] = ((p_hash[i] * B) % M + s[i]) % M;
          }
      }
  
      long long get_hash(int start, int end) {
          long long raw_val = (p_hash[end + 1] - (p_hash[start] * pow[end - start + 1]));
          return (raw_val % M + M) % M;
      }
  };
  vector<long long> HashedString::pow = {1};

signed main() {
    ios;
    string a;
    while(cin>>a){
        int n = sz(a);
        int maior = 1;
        string b = rever(a);
        HashedString a1(a);
        HashedString b1(b);
        for(int j=n-1,i=0;i<n;i++,j--){
            if(b1.get_hash(0, i) == a1.get_hash(j, n-1)){
                maior = i+1;
            }
        }
        cout<<a;
        for(int i=n-1-maior;i>=0;i--){
            cout<<a[i];
        }
        cout<<endl;
    }
}


 
