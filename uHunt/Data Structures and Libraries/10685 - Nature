#include <bits/stdc++.h>
using namespace std;
#define ios ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define import <chatgpt>
//made by dudugyn :DD
#define int long long
#define f first
#define s second
#define pb push_back
#define bg begin()
#define en end()
#define rbg rbegin()
#define ren rend()
#define sz(x) (int)(x.size())
#define all(x) (x).bg,(x).en
#define alld(x) (x).rbg,(x).ren
#define lb lower_bound
#define up upper_bound 
#define sorc(x) sort(all(x))
#define sord(x) sort(alld(x))
#define rever(x) string(alld(x))
 
int mod = (int)1e9+7;
#define inf LLONG_MAX
#define endl '\n'

#define vi vector<int>
#define vvi vector<vi>
#define vvvi vector<vvi>
#define pii pair<int,int>
#define vpi vector<pii>
//broken input = i, ceil = j -> fmod(i, j) == i%j
//auto func = [&]() -> vi{};
int fmod(const int i, const int j){
	return i < j ? i : i % j;
}
template<class v>
auto operator<<(ostream &os, const vector<v> &vec)->ostream& {
    os << vec[0];
    for (size_t i = 1; i < vec.size(); i++) 
        os << ' ' << vec[i];    
    os << '\n';
    return os;
}
template<class v>
auto operator>>(istream &is, vector<v> &vec)->istream& {
    for (auto &i : vec) 
        is >> i;    
    return is;
}
template<class v>
auto operator<<(ostream &os, const vector<vector<v>> &vec)->ostream& {
    for (auto &i : vec) {
        os << i[0];
        for (size_t j = 1; j < i.size(); j++) 
            os << ' ' << i[j];        
        os << '\n';
    }
    return os;
}
template<class v>
auto operator>>(istream  &is, vector<vector<v>> &vec)->istream& {
    for (auto &i : vec) 
        for (auto &j : i) 
            is >> j;            
    return is;
}
vi parents;
vi sizes;
int find(int x) { return parents[x] == x ? x : (parents[x] = find(parents[x])); }
bool unite(int x, int y) {
  int x_root = find(x);
  int y_root = find(y);
  if (x_root == y_root) { return false; }
  if (sizes[x_root] < sizes[y_root]) { swap(x_root, y_root); }
  sizes[x_root] += sizes[y_root];
  parents[y_root] = x_root;
  return true;
}
bool connected(int x, int y) { return find(x) == find(y); }
signed main(){
	ios;
    int n,m;
    cin>>n>>m;
    while(n||m){
        parents = vi(n);
        sizes = vi(n, 1);
        iota(all(parents), 0);
        map<string,int> mp;
        int q=0;
        for(int i=0;i<n;i++){
            string a;
            cin>>a;
            if(mp.find(a)==mp.en)mp[a]=q++;
        }
        for(int i=0;i<m;i++){
            string a,b;
            cin>>a>>b;
            unite(mp[a],mp[b]);
        }
        sorc(sizes);
        cout<<sizes[n-1]<<endl;
        cin>>n>>m;
    }
}
