#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp>
#include <functional> // for less
using namespace __gnu_pbds;
using namespace std;
 
// a new data structure defined. Please refer below
// GNU link : https://goo.gl/WVDL6g
typedef tree<pair<int, int>, null_type,
             less<pair<int, int> >, rb_tree_tag,
             tree_order_statistics_node_update>
    ordered_multiset;
using namespace std;
#define ios ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define import <chatgpt>
//made by dudugyn :DD
#define int long long
#define f first
#define s second
#define pb push_back
#define bg begin()
#define en end()
#define rbg rbegin()
#define ren rend()
#define sz(x) (int)(x.size())
#define all(x) (x).bg,(x).en
#define alld(x) (x).rbg,(x).ren
#define lb lower_bound
#define up upper_bound 
#define sorc(x) sort(all(x))
#define sord(x) sort(alld(x))
#define rever(x) string(alld(x))
 
int mod = (int)1e9+7;
#define inf LLONG_MAX
#define endl '\n'
 
#define vi vector<int>
#define vvi vector<vi>
#define vvvi vector<vvi>
#define pii pair<int,int>
#define vpi vector<pii>
#define vvpi vector<vpi>
template<class v>
auto operator<<(ostream &os, const vector<v> &vec)->ostream& {
    os << vec[0];
    for (size_t i = 1; i < vec.size(); i++) os << ' ' << vec[i];    
    os << '\n';
    return os;
}
template<class v>
auto operator>>(istream &is, vector<v> &vec)->istream& {
    for (auto &i : vec) is >> i;    
    return is;
}
template<class v>
auto operator<<(ostream &os, const vector<vector<v>> &vec)->ostream& {
    for (auto &i : vec) {
        os << i[0];
        for (size_t j = 1; j < i.size(); j++) os << ' ' << i[j];        
        os << '\n';
    }
    return os;
}
template<class v>
auto operator>>(istream  &is, vector<vector<v>> &vec)->istream& {
    for (auto &i : vec) 
        for (auto &j : i) is >> j;            
    return is;
}
int n, l;
vvi adj;
int timer;
vi tin, tout, h;
vvi upe;
void dfs(int v, int p){
    tin[v] = ++timer;
    upe[v][0] = p;
    h[v] = h[p] + 1;
    for (int i = 1; i < l; ++i)
       upe[v][i] = upe[upe[v][i-1]][i-1];
    for (auto u : adj[v]) 
        if (u != p)
            dfs(u, v);
    tout[v] = ++timer;
}
bool is_ancestor(int u, int v)
{return tin[u] <= tin[v] && tout[u] >= tout[v];}
int lca(int u, int v){
    if (is_ancestor(u, v))return u;
    if (is_ancestor(v, u))return v;
    for (int i = l-1; i >= 0; --i) 
        if (!is_ancestor(upe[u][i], v))
            u = upe[u][i];
    return upe[u][0];
}
void preprocess(int root) {
    h.resize(n);
    tin.resize(n);
    tout.resize(n);
    timer = 0;
    l = 20;
    upe.assign(n, vi(l));
	dfs(root,root);
}
int solve(){
    int u, a;
    cin>>u>>a;
    --u;
    //cout<<h[u]<<endl;
    if(h[u] <= a)return -1;
    for(int i=l-1;i>=0;i--){
        if(a >= (1 << i)){
            u = upe[u][i];
            a-=(1<<i);
        }
    }
    return u + 1;
}
signed main(){
	ios;
    int m;
    cin>>n>>m;
    adj = vvi(n);
    for(int i=1;i<n;i++){
        int u;
        cin>>u; --u;
        adj[i].pb(u);
        adj[u].pb(i);
    }
    preprocess(0);
    //for(int i=0;i<n;i++)
        //for(int j=0;j<=l;j++)cout<<upe[i][j]<<" \n"[j==l];
    while(m--){
        cout<<solve()<<endl;
    }
}
